# 231025 section2 ~ 3
---
## html만으로 간단한 웹사이트 만들기
    
reactex.html
  ```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>설화의 블로그</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>설화의 블로그에 오신 여러분 환영합니다!</h1>
    <div id="root"></div>

    <!-- 리액트 가져오기 -->
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin=></script>

    <!-- 리액트 컴포넌트 가져오기 -->
    <script src="MyButton.js"></script>
</body>
</html>
```

style.css
```
h1 {
    color: green;
    font-style: italic;
}
```

MyButton.js
```
function MyButton(props) {
    const [isClicked, setIsCilcked] = React.useState(false);

    return React.createElement (
        'button',
        { onClick: () => setIsCilcked(true) },
        isClicked ? 'Clicked!' : 'Click here!'
    )
}

const domContainer = document.querySelector('#root');
ReactDOM.render(React.createElement(MyButton), domContainer);
```
---
##create-react-app
npx: e**x**ecute **np**m package binaries

**사용법**
$npx create-react-app <your-project-name>
- 내 코드에서 npx create-react-app appp

**경로 변경**
$cd appp

**어플리케이션 실행**
npm start

---
##JSX
-  A syntax extension to javascript
- 자바스크립트의 문법을 확장시킴
- javascript + xml/ html

**JSX 코드**
```
const element = <h1>Hello world!</h1>
```

**jsx의 역할**
xml / html 코드를 자바스크립트로 변환하는 과정을 거침
jsx 코드를 javascript로 변환하는 역할 : React.createElement 함수

```
React.createElement(
	type,
	[props],
	[...children]
)
```

jsx를 사용한 코드
```
class Hello extends React.Component {
	render() {
		return <div>Hello {this.props.toWhat}</div>;
	}
}

ReactDOM.render (
	<Hello toWhat = "World"/>,
	document.getElementById('root')
);
```

jsx를 사용하지 않은 코드
```
class Hello extends React.Component {
	render() {
		return React.createElement('div', null, `Hello ${this.props.toWhat}`);
	}
}

ReactDOM.render (
	React.createElement(Hello, {toWhat: 'World'}, null),
	document.getElementById('root')
);
```

```
//jsx를 사용한 코드
const element = ( 
	<h1 className="greeting">
		Hello, world!
	</h1>
)

//jsx를 사용하지 않은 코드
const element = React.createElement(
	'h1',
	{ className: 'greeting' },
	'Hello, world!'
)

//React.createElement()의 결과로 아래와 같은 객체가 생성됨
const element = {
	type: 'h1',
	props: {
		className: 'greeting',
		children: 'Hello, world!'
	}
}

//react.element의 파라미터는?
React.createElement(
	type, //유형 div, span ... 등등
	[props], //속성
	[...children] //현재 엘리먼트가 사용하는 자식 엘리먼 
)
```
- 리액트에서 jsx를 쓰는 것이 필수는 아니지만 장점이 많기 때문에 편리함.

---

##JSX의 장점
- 간결한 코드
```
//jsx 사용함
<div>Hello, {name}</div>

//jsx 사용 안함
React.createElement('div',null,'Hello, ${name}')
```
- 가독성 향상
코드의 의미가 빠르게 와닿음, 유지보수하기 좋음, 버그 발견하기 좋음
- Injection Attacks 방어
입력창에 일반적인 값이 아닌 소스 코드를 이용하여 해당 코드가 실행되도록 하는 해킹 방법

```
//잠재적으로 보안 위험성이 있는 코드를 삽입
const title = response.potentiallyMaliciousInput;

// 이 코드는 안전합니다.
const element = <h1>{title}</h1>;
```

jsx의 사용법
```
const name = '설화';
const element = <h1>안녕, {name}</h1>;// name이란 자바스크립트 코드를 사용하기 위한 {}

ReactDOM.render(
	element, 
	document.getElementById('root')
);
```

태그의 속성(attribute)에 값을 넣는 방법
```
//큰다옴표 사이에 문자열을 넣거나
const element = <div tabIndex = "0"></div>;

//중괄호 사이에 자바스크립트 코드를 넣으면 됨!
const element = <img src= {user.avaterUrl}></img>;
```

자식을 정의하는 방법
```
const element = (
	<div>
		<h1>안녕하세요</h1>
		<h2>열심히 리액트를 공부해 봅시다!</h2>
	</div>
)
```

---
##JSX 코드 작성해보기


Book.jsx
```
import React from "react";

function Book(props) {
    return (
        <div>
            <h1>{`이 책의 이름은 ${props.name}입니다.`}</h1>
            <h2>{`이 책은 총 ${props.numOfPage}페이지로 이뤄져 있습니다.`}</h2>
        </div>
    );
}

export default Book;
```

Library.jsx
```
import React from "react";
import Book from "./Book";

function Library(props) {
    return (
        <div>
            <Book name="처음 만난 파이썬" numOfPage={300}></Book>
            <Book name="처음 만난 AWS" numOfPage={400}></Book>
            <Book name="처음 만난 리액트" numOfPage={500}></Book>
        </div>
    )
}
```

index.js 수정
```
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

import Library from './chapter_03/Library';

ReactDOM.render(
  <React.StrictMode>
    <Library/>
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();import React from "react";
import Book from "./Book";

function Library(props) {
    return (
        <div>
            <Book name="처음 만난 파이썬" numOfPage={300} />
            <Book name="처음 만난 AWS" numOfPage={400}/>
            <Book name="처음 만난 리액트" numOfPage={500}/>
        </div>
    );
}
export default Library;
```
